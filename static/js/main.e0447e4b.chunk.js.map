{"version":3,"sources":["utils/load-contract.js","App.js","index.js"],"names":["loadContract","name","provider","fetch","res","json","Artifact","_contract","contract","setProvider","deployed","deployedContract","App","useState","web3","web3Api","setweb3Api","account","setAccount","balance","setBalance","reload","shouldReload","reloadEffect","useEffect","loadprovider","detectEthereumProvider","request","method","Web3","console","error","log","loadBalance","eth","getBalance","address","utils","fromWei","getAccount","getAccounts","accounts","transferFund","transfer","from","value","toWei","withdrawFund","withdrawAmmount","withdraw","className","type","onClick","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iTACcA,EAAY,iDAAC,WAAMC,EAAKC,GAAQ,uGACzBC,MAAM,cAAD,OAAeF,EAAI,UAAQ,OAAvC,OAAHG,EAAI,EAAD,cACYA,EAAIC,OAAO,KAAD,EAEA,OAFzBC,EAAS,EAAD,MACRC,EAAUC,IAASF,IACfG,YAAYP,GAAS,UACFK,EAAUG,WAAW,KAAD,GAA3B,OAAhBC,EAAiB,EAAD,uBACfA,GAAgB,4CAC3B,gBAPyB,wC,QCgIXC,MA5Hf,WACI,MAA8BC,mBAAS,CACnCX,SAAS,KACTY,KAAK,KACLN,SAAS,OACX,mBAJKO,EAAO,KAAEC,EAAU,KAM1B,EAA2BH,mBAAS,MAAK,mBAAlCI,EAAO,KAACC,EAAU,KACzB,EAA2BL,mBAAS,MAAK,mBAAlCM,EAAO,KAACC,EAAU,KACxB,EAA4BP,mBAAS,MAAK,mBAAnCQ,EAAM,KAACC,EAAY,KACnBC,EAAa,WAAD,OAAMD,GAAcD,EAAQ,EAIlDG,qBAAU,WACJ,IAAMC,EAAY,iDAAC,gHACIC,MAAyB,KAAD,EAA/B,OAARxB,EAAS,EAAD,cACOF,EAAa,SAASE,GAAU,KAAD,EAA9CM,EAAS,EAAD,KACXN,GACDA,EAASyB,QAAQ,CAACC,OAAO,wBACzBZ,EAAW,CACTF,KAAK,IAAIe,IAAK3B,GACdA,WACAM,cAIFsB,QAAQC,MAAM,4BAsBd,2CACH,kBAnCiB,mCAoCfN,GACF,GAAE,IAEFK,QAAQE,IAAIjB,EAAQD,MAEpBU,qBAAU,WACJ,IAAMS,EAAW,iDAAC,kGACI,OAAbzB,EAAeO,EAAfP,SAASM,EAAMC,EAAND,KAAI,SACCA,EAAKoB,IAAIC,WAAW3B,EAAS4B,SAAS,KAAD,EAApDjB,EAAO,OACZC,EAAWN,EAAKuB,MAAMC,QAAQnB,EAAQ,UAAU,2CAClD,kBAJgB,mCAKbJ,EAAQP,UAAYyB,GAC9B,GAAE,CAAClB,EAAQM,IAEXG,qBAAU,WACJ,IAAMe,EAAU,iDAAE,8GACMxB,EAAQD,KAAKoB,IAAIM,cAAa,OAA7CC,EAAS,EAAD,KACdvB,EAAWuB,EAAS,IAAI,2CAC1B,kBAHe,mCAIhB1B,EAAQD,MAAQyB,GACtB,GAAE,CAACxB,EAAQD,OAEX,IAAM4B,EAAY,iDAAC,gGACM,OAAblC,EAAeO,EAAfP,SAASM,EAAMC,EAAND,KAAI,SACbN,EAASmC,SAAS,CACtBC,KAAK3B,EACL4B,MAAM/B,EAAKuB,MAAMS,MAAM,uBAAuB,WAC7C,KAAD,EAEFvB,IAAe,2CACpB,kBARiB,mCAUZwB,EAAY,iDAAC,kGAEsD,OADjEvC,EAAeO,EAAfP,SAASM,EAAMC,EAAND,KACRkC,EAAgBlC,EAAKuB,MAAMS,MAAM,uBAAuB,SAAS,EAAD,OAC/DtC,EAASyC,SAASD,EAAgB,CACvCJ,KAAK3B,IACJ,OACFM,IAAe,2CAClB,kBAPiB,mCAQzB,OACE,mCACE,sBAAK2B,UAAU,mBAAkB,UAC/B,qBAAKA,UAAU,cAAa,qBAC5B,sBAAKA,UAAU,YAAW,UACxB,qBAAIA,UAAU,aAAY,sBAAW/B,EAAO,WAC5C,oBAAG+B,UAAU,YAAW,qBAAUjC,GAAgB,mBAAoB,OAatE,wBAAQkC,KAAK,SAASD,UAAU,mBAAmBE,QAASV,EAAa,sBAEhE,OAET,wBAAQS,KAAK,SAASD,UAAU,mBAAmBE,QAASL,EAAa,yBAI3E,qBAAKG,UAAU,yBAAwB,oCAI/C,EC3HaG,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,M","file":"static/js/main.e0447e4b.chunk.js","sourcesContent":[" import contract from \"@truffle/contract\"\r\n export const loadContract=async(name,provider)=>{\r\n     const res=await fetch(`/contracts/${name}.json`)\r\n     const Artifact=await res.json();\r\n     const _contract=contract(Artifact);\r\n     _contract.setProvider(provider)\r\n     const deployedContract=await _contract.deployed();\r\n     return deployedContract;\r\n}\r\n ","import './App.css';\r\nimport {useEffect,useState} from 'react';\r\nimport Web3 from 'web3';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport  {loadContract}  from './utils/load-contract';\r\nfunction App() {\r\n    const [web3Api, setweb3Api] = useState({\r\n        provider:null,\r\n        web3:null,\r\n        contract:null\r\n    });\r\n\r\n    const [account,setAccount]=useState(null);\r\n    const [balance,setBalance]=useState(null);\r\n     const [reload,shouldReload]=useState(null);\r\n      const reloadEffect=()=> shouldReload(!reload);\r\n\r\n      \r\n\r\n  useEffect(() => {\r\n        const loadprovider=async()=>{\r\n          const provider=await detectEthereumProvider();\r\n          const contract=await loadContract(\"Funder\",provider);\r\n          if(provider){\r\n            provider.request({method:\"eth_requestAccounts\"});\r\n            setweb3Api({\r\n              web3:new Web3(provider),\r\n              provider,\r\n              contract,\r\n           });\r\n          } \r\n          else{\r\n            console.error('please install meta mask');\r\n          }\r\n            // console.log( window.web3);\r\n            // console.log( window.ethereum);\r\n            // let provider=null;\r\n            // if(window.ethereum){\r\n            //   provider=window.ethereum;\r\n            //   try{\r\n            //         await provider.enable();\r\n            //   }\r\n            //   catch{\r\n            //     console.error(\"User is not allowed\");\r\n            //   }\r\n            // } else if(window.web3){\r\n            //    provider=window.web3.currentProvider;\r\n            // } else if (!process.env.production){\r\n            //    provider=new Web3.provider.HttpProvider(\"http://127.0.0.1:7545\");\r\n            // }\r\n\r\n            // setweb3Api({\r\n            //    web3:new Web3(provider),\r\n            //    provider\r\n            // });\r\n        }\r\n           loadprovider();\r\n         },[]);\r\n\r\n         console.log(web3Api.web3);\r\n\r\n         useEffect(()=>{\r\n               const loadBalance=async()=>{\r\n                 const {contract,web3}=web3Api;\r\n                 const balance =await web3.eth.getBalance(contract.address);\r\n                  setBalance(web3.utils.fromWei(balance,\"ether\"));\r\n               }\r\n                   web3Api.contract && loadBalance();\r\n         },[web3Api,reload])\r\n         \r\n         useEffect(()=>{\r\n               const getAccount= async()=>{\r\n                  const accounts=await web3Api.web3.eth.getAccounts()\r\n                  setAccount(accounts[0]);\r\n               }\r\n               web3Api.web3 && getAccount()\r\n         },[web3Api.web3]);\r\n\r\n         const transferFund=async()=>{\r\n              const {contract,web3}=web3Api;\r\n               await contract.transfer({\r\n                 from:account,\r\n                 value:web3.utils.toWei(\"0.000000000000000001\",\"ether\")\r\n               });\r\n\r\n               reloadEffect();\r\n         } \r\n         \r\n         const withdrawFund=async()=>{\r\n          const {contract,web3}=web3Api;\r\n            const withdrawAmmount=web3.utils.toWei(\"0.000000000000000001\",\"ether\");\r\n             await contract.withdraw(withdrawAmmount,{\r\n              from:account\r\n             })\r\n             reloadEffect();\r\n         }\r\n  return (\r\n    <>\r\n      <div className=\"card text-center\">\r\n        <div className=\"card-header\">Funding</div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">Balance: {balance} ETH </h5>\r\n          <p className=\"card-text\">Account:{account?account:\"not connected\"}</p>\r\n           {/* <button\r\n            type=\"button\" className=\"btn btn-success\"\r\n             onClick={ async()=>{ \r\n                 const accounts = await window.ethereum.request({\r\n                  method:\"eth_requestAccounts\",\r\n             })\r\n                console.log(accounts);\r\n             }}\r\n            >\r\n            Connect to metamask\r\n          </button> */}\r\n          &nbsp;\r\n          <button type=\"button\" className=\"btn btn-success \" onClick={transferFund}>\r\n            Transfer\r\n          </button>\r\n          &nbsp;\r\n          <button type=\"button\" className=\"btn btn-primary \" onClick={withdrawFund} >\r\n            Withdraw\r\n          </button>\r\n        </div>\r\n        <div className=\"card-footer text-muted\">Sarvagya Chaudhary</div>\r\n      </div>\r\n    </> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n\r\n"],"sourceRoot":""}